<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox1.Text" xml:space="preserve">
    <value>- Giảng viên chọn lớp học hiện tại đang quản lí trên mục "Danh Sách Lớp Quản Lí" và nhấn "Điểm Danh" để thực hiện điểm danh.
- Tại cửa sổ Điểm Danh, Chờ cho đến khi kết nối được với thiết bị(Nhìn thông báo ở thanh trạng thái dưới cùng) thì bắt đầu diểm danh.
      + Giảng Viên ghi vào trường "Sinh viên không mang thẻ" các mã sinh viên đi học quên mang thẻ các mã này cách nhau bằng dấu ";". ví dụ CCCT15B001; CCCT15B002;...
      + Giảng Viên ghi vào trường "Sinh viên vắng có phép" mã các sinh viên vắng học có phép và nội dung phép ngắn gọn không quá 50 ký tự theo mẫu. ví dụ CCCT15B001 - Bị ốm; CCCT15B002 - Họp đoàn trường;...
      + Sau cùng nhấn "Lưu" để lưu lại thông tin trên trước khi hoàn thành điểm danh.
- Sau khi hoàn thành buổi học, Giảng Viên lưu dữ liệu lại bằng cách click vào "Lưu Dữ Liệu" , sau khi có thông báo lưu thành công trên vùng log dữ liệu thì có thể thoát chương trình.
- Sau khi thoát chương trình điểm danh, Sẽ không thể tiếp tục điểm danh lần 2 trong buổi học hôm đó.
- Giảng viên xem các thông tin của sinh viên bên vùng thông tin sinh viên. có thể click vào hình ảnh để phóng to.
- Tất cả các quá trình ghi nhận, lưu trữ thông tin điểm danh sẽ được ghi lại vào vùng log dữ liệu.

*** Các Điểm Lưu Ý:
- việc Ghi danh sẽ được tính khi thực hiện 2 lần, là VÀO và RA lớp. khoản thời gian này được tính bằng phút và sẽ tùy chỉnh trong phần "Thiết Lập" trên MENU.
- Nếu sinh viên điểm danh với khoản thời gian nhỏ hơn khoản thời gian quy định thì sẽ không tính là tham gia học tập mà sẽ bị đánh vắng.
- Các sinh viên nếu chỉ điểm danh thời gian vào mà không có thời gian ra thì xem như không tham gia vào buổi học hôm đó.
- Các trương hợp hợp lệ khác sẽ được lưu vào CSDL. Các dữ liệu tạm điểm danh của lớp sẽ tự động bị xóa sau 12h hoặc 19h hàng ngày!

Sinh viên khi đi học cần mang thẻ sinh viên theo để đảm bảo chất lượng ghi danh. 
Nếu có lỗi phát sinh không mong muốn xãy ra vui lòng liên hệ quản trị để được hổ trợ.
</value>
  </data>
</root>